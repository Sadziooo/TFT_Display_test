
TFT_Display_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d04  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00026bf8  08002e9c  08002e9c  00003e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029a94  08029a94  0002b014  2**0
                  CONTENTS
  4 .ARM          00000008  08029a94  08029a94  0002aa94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029a9c  08029a9c  0002b014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029a9c  08029a9c  0002aa9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029aa0  08029aa0  0002aaa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08029aa4  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000014  08029ab8  0002b014  2**2
                  ALLOC
 10 ._user_heap_stack 00002200  200000d8  08029ab8  0002b0d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002b014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfe0  00000000  00000000  0002b044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002084  00000000  00000000  00037024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  000390a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000959  00000000  00000000  00039ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d75  00000000  00000000  0003a641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6e4  00000000  00000000  000503b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d4be  00000000  00000000  0005ea9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebf58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000323c  00000000  00000000  000ebf9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ef1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002e84 	.word	0x08002e84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08002e84 	.word	0x08002e84

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	4b4e      	ldr	r3, [pc, #312]	@ (800061c <MX_GPIO_Init+0x154>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e6:	4a4d      	ldr	r2, [pc, #308]	@ (800061c <MX_GPIO_Init+0x154>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ee:	4b4b      	ldr	r3, [pc, #300]	@ (800061c <MX_GPIO_Init+0x154>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	4b47      	ldr	r3, [pc, #284]	@ (800061c <MX_GPIO_Init+0x154>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a46      	ldr	r2, [pc, #280]	@ (800061c <MX_GPIO_Init+0x154>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
 800050a:	4b44      	ldr	r3, [pc, #272]	@ (800061c <MX_GPIO_Init+0x154>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	4b40      	ldr	r3, [pc, #256]	@ (800061c <MX_GPIO_Init+0x154>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a3f      	ldr	r2, [pc, #252]	@ (800061c <MX_GPIO_Init+0x154>)
 8000520:	f043 0302 	orr.w	r3, r3, #2
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b3d      	ldr	r3, [pc, #244]	@ (800061c <MX_GPIO_Init+0x154>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0302 	and.w	r3, r3, #2
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_USER_GPIO_Port, LED_USER_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000538:	4839      	ldr	r0, [pc, #228]	@ (8000620 <MX_GPIO_Init+0x158>)
 800053a:	f001 f911 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin|LCD_BL_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f248 0158 	movw	r1, #32856	@ 0x8058
 8000544:	4837      	ldr	r0, [pc, #220]	@ (8000624 <MX_GPIO_Init+0x15c>)
 8000546:	f001 f90b 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000550:	4835      	ldr	r0, [pc, #212]	@ (8000628 <MX_GPIO_Init+0x160>)
 8000552:	f001 f905 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_USER_Pin;
 8000556:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_USER_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	482c      	ldr	r0, [pc, #176]	@ (8000620 <MX_GPIO_Init+0x158>)
 8000570:	f000 ff72 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000574:	2301      	movs	r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000578:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800057c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	4619      	mov	r1, r3
 8000588:	4826      	ldr	r0, [pc, #152]	@ (8000624 <MX_GPIO_Init+0x15c>)
 800058a:	f000 ff65 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin;
 800058e:	2318      	movs	r3, #24
 8000590:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	2301      	movs	r3, #1
 8000594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	4619      	mov	r1, r3
 80005a4:	481f      	ldr	r0, [pc, #124]	@ (8000624 <MX_GPIO_Init+0x15c>)
 80005a6:	f000 ff57 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80005aa:	2340      	movs	r3, #64	@ 0x40
 80005ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	4619      	mov	r1, r3
 80005c0:	4818      	ldr	r0, [pc, #96]	@ (8000624 <MX_GPIO_Init+0x15c>)
 80005c2:	f000 ff49 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_WHITE_Pin;
 80005c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_WHITE_GPIO_Port, &GPIO_InitStruct);
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	4619      	mov	r1, r3
 80005de:	4812      	ldr	r0, [pc, #72]	@ (8000628 <MX_GPIO_Init+0x160>)
 80005e0:	f000 ff3a 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80005e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005ee:	2302      	movs	r3, #2
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4619      	mov	r1, r3
 80005fc:	4809      	ldr	r0, [pc, #36]	@ (8000624 <MX_GPIO_Init+0x15c>)
 80005fe:	f000 ff2b 	bl	8001458 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2006      	movs	r0, #6
 8000608:	f000 fefc 	bl	8001404 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800060c:	2006      	movs	r0, #6
 800060e:	f000 ff15 	bl	800143c <HAL_NVIC_EnableIRQ>

}
 8000612:	bf00      	nop
 8000614:	3720      	adds	r7, #32
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40020800 	.word	0x40020800
 8000624:	40020000 	.word	0x40020000
 8000628:	40020400 	.word	0x40020400

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fdc9 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f89d 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063a:	f7ff ff45 	bl	80004c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800063e:	f000 f919 	bl	8000874 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ST7789_init();
 8000642:	f000 fb2f 	bl	8000ca4 <ST7789_init>

  ST7789_fill_box(0, 0, DISPLAY_W, 30, RED);
 8000646:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	231e      	movs	r3, #30
 800064e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000652:	2100      	movs	r1, #0
 8000654:	2000      	movs	r0, #0
 8000656:	f000 fc2e 	bl	8000eb6 <ST7789_fill_box>
  ST7789_fill_box(0, 30, DISPLAY_W, 30, GREEN);
 800065a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	231e      	movs	r3, #30
 8000662:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000666:	211e      	movs	r1, #30
 8000668:	2000      	movs	r0, #0
 800066a:	f000 fc24 	bl	8000eb6 <ST7789_fill_box>
  ST7789_fill_box(0, 60, DISPLAY_W, 30, BLUE);
 800066e:	231f      	movs	r3, #31
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	231e      	movs	r3, #30
 8000674:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000678:	213c      	movs	r1, #60	@ 0x3c
 800067a:	2000      	movs	r0, #0
 800067c:	f000 fc1b 	bl	8000eb6 <ST7789_fill_box>
  ST7789_fill_box(0, 90, DISPLAY_W, 30, YELLOW);
 8000680:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	231e      	movs	r3, #30
 8000688:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800068c:	215a      	movs	r1, #90	@ 0x5a
 800068e:	2000      	movs	r0, #0
 8000690:	f000 fc11 	bl	8000eb6 <ST7789_fill_box>
  ST7789_fill_box(0, 120, DISPLAY_W, 30, MAGENTA);
 8000694:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	231e      	movs	r3, #30
 800069c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80006a0:	2178      	movs	r1, #120	@ 0x78
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 fc07 	bl	8000eb6 <ST7789_fill_box>
  ST7789_fill_box(0, 150, DISPLAY_W, 30, WHITE);
 80006a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	231e      	movs	r3, #30
 80006b0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80006b4:	2196      	movs	r1, #150	@ 0x96
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 fbfd 	bl	8000eb6 <ST7789_fill_box>
  ST7789_fill_box(0, 180, DISPLAY_W, 30, LGRAYBLUE);
 80006bc:	f24a 6351 	movw	r3, #42577	@ 0xa651
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	231e      	movs	r3, #30
 80006c4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80006c8:	21b4      	movs	r1, #180	@ 0xb4
 80006ca:	2000      	movs	r0, #0
 80006cc:	f000 fbf3 	bl	8000eb6 <ST7789_fill_box>
  ST7789_fill_box(0, 210, DISPLAY_W, 30, BLACK);
 80006d0:	2300      	movs	r3, #0
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	231e      	movs	r3, #30
 80006d6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80006da:	21d2      	movs	r1, #210	@ 0xd2
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 fbea 	bl	8000eb6 <ST7789_fill_box>

  HAL_Delay(2000);
 80006e2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006e6:	f000 fdb1 	bl	800124c <HAL_Delay>

  ST7789_draw_image_fast(0, 0, DISPLAY_W, DISPLAY_H, (uint16_t* )dicaprio);
 80006ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <main+0x138>)
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	23f0      	movs	r3, #240	@ 0xf0
 80006f0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80006f4:	2100      	movs	r1, #0
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 fc03 	bl	8000f02 <ST7789_draw_image_fast>

  ST7789_write_string(70, 200, "Cheers mate!", Font_16x26, WHITE, BLACK);
 80006fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <main+0x13c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	9202      	str	r2, [sp, #8]
 8000702:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000706:	9201      	str	r2, [sp, #4]
 8000708:	685a      	ldr	r2, [r3, #4]
 800070a:	9200      	str	r2, [sp, #0]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a17      	ldr	r2, [pc, #92]	@ (800076c <main+0x140>)
 8000710:	21c8      	movs	r1, #200	@ 0xc8
 8000712:	2046      	movs	r0, #70	@ 0x46
 8000714:	f000 fd11 	bl	800113a <ST7789_write_string>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ST7789_write_string(70, 200, "Cheers mate!", Font_16x26, WHITE, BLACK);
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <main+0x13c>)
 800071a:	2200      	movs	r2, #0
 800071c:	9202      	str	r2, [sp, #8]
 800071e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000722:	9201      	str	r2, [sp, #4]
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	9200      	str	r2, [sp, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a10      	ldr	r2, [pc, #64]	@ (800076c <main+0x140>)
 800072c:	21c8      	movs	r1, #200	@ 0xc8
 800072e:	2046      	movs	r0, #70	@ 0x46
 8000730:	f000 fd03 	bl	800113a <ST7789_write_string>
	  HAL_Delay(2000);
 8000734:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000738:	f000 fd88 	bl	800124c <HAL_Delay>
	  ST7789_write_string(70, 200, "Wazzuuuupp!", Font_16x26, WHITE, BLACK);
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <main+0x13c>)
 800073e:	2200      	movs	r2, #0
 8000740:	9202      	str	r2, [sp, #8]
 8000742:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000746:	9201      	str	r2, [sp, #4]
 8000748:	685a      	ldr	r2, [r3, #4]
 800074a:	9200      	str	r2, [sp, #0]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a08      	ldr	r2, [pc, #32]	@ (8000770 <main+0x144>)
 8000750:	21c8      	movs	r1, #200	@ 0xc8
 8000752:	2046      	movs	r0, #70	@ 0x46
 8000754:	f000 fcf1 	bl	800113a <ST7789_write_string>
	  HAL_Delay(2000);
 8000758:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800075c:	f000 fd76 	bl	800124c <HAL_Delay>
	  ST7789_write_string(70, 200, "Cheers mate!", Font_16x26, WHITE, BLACK);
 8000760:	bf00      	nop
 8000762:	e7d9      	b.n	8000718 <main+0xec>
 8000764:	08002eb8 	.word	0x08002eb8
 8000768:	20000004 	.word	0x20000004
 800076c:	08002e9c 	.word	0x08002e9c
 8000770:	08002eac 	.word	0x08002eac

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b094      	sub	sp, #80	@ 0x50
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0320 	add.w	r3, r7, #32
 800077e:	2230      	movs	r2, #48	@ 0x30
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fb52 	bl	8002e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	4b27      	ldr	r3, [pc, #156]	@ (800083c <SystemClock_Config+0xc8>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a0:	4a26      	ldr	r2, [pc, #152]	@ (800083c <SystemClock_Config+0xc8>)
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a8:	4b24      	ldr	r3, [pc, #144]	@ (800083c <SystemClock_Config+0xc8>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <SystemClock_Config+0xcc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a20      	ldr	r2, [pc, #128]	@ (8000840 <SystemClock_Config+0xcc>)
 80007be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <SystemClock_Config+0xcc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2310      	movs	r3, #16
 80007da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007e4:	2308      	movs	r3, #8
 80007e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007e8:	2364      	movs	r3, #100	@ 0x64
 80007ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 0320 	add.w	r3, r7, #32
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 ffef 	bl	80017dc <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000804:	f000 f830 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2302      	movs	r3, #2
 800080e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000818:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2103      	movs	r1, #3
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fa51 	bl	8001ccc <HAL_RCC_ClockConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000830:	f000 f81a 	bl	8000868 <Error_Handler>
  }
}
 8000834:	bf00      	nop
 8000836:	3750      	adds	r7, #80	@ 0x50
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a04      	ldr	r2, [pc, #16]	@ (8000864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d101      	bne.n	800085a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000856:	f000 fcd9 	bl	800120c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40010000 	.word	0x40010000

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000878:	4b17      	ldr	r3, [pc, #92]	@ (80008d8 <MX_SPI1_Init+0x64>)
 800087a:	4a18      	ldr	r2, [pc, #96]	@ (80008dc <MX_SPI1_Init+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087e:	4b16      	ldr	r3, [pc, #88]	@ (80008d8 <MX_SPI1_Init+0x64>)
 8000880:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000884:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000886:	4b14      	ldr	r3, [pc, #80]	@ (80008d8 <MX_SPI1_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <MX_SPI1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_SPI1_Init+0x64>)
 80008a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_SPI1_Init+0x64>)
 80008a8:	2210      	movs	r2, #16
 80008aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <MX_SPI1_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <MX_SPI1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	@ (80008d8 <MX_SPI1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <MX_SPI1_Init+0x64>)
 80008c0:	220a      	movs	r2, #10
 80008c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	@ (80008d8 <MX_SPI1_Init+0x64>)
 80008c6:	f001 fbff 	bl	80020c8 <HAL_SPI_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008d0:	f7ff ffca 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000030 	.word	0x20000030
 80008dc:	40013000 	.word	0x40013000

080008e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a28      	ldr	r2, [pc, #160]	@ (80009a0 <HAL_SPI_MspInit+0xc0>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d149      	bne.n	8000996 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <HAL_SPI_MspInit+0xc4>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	4a26      	ldr	r2, [pc, #152]	@ (80009a4 <HAL_SPI_MspInit+0xc4>)
 800090c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000910:	6453      	str	r3, [r2, #68]	@ 0x44
 8000912:	4b24      	ldr	r3, [pc, #144]	@ (80009a4 <HAL_SPI_MspInit+0xc4>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b20      	ldr	r3, [pc, #128]	@ (80009a4 <HAL_SPI_MspInit+0xc4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a1f      	ldr	r2, [pc, #124]	@ (80009a4 <HAL_SPI_MspInit+0xc4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <HAL_SPI_MspInit+0xc4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <HAL_SPI_MspInit+0xc4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a18      	ldr	r2, [pc, #96]	@ (80009a4 <HAL_SPI_MspInit+0xc4>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <HAL_SPI_MspInit+0xc4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = LCD_SPI_SCK_Pin|LCD_SPI_MOSI_Pin;
 8000956:	23a0      	movs	r3, #160	@ 0xa0
 8000958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095e:	2301      	movs	r3, #1
 8000960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000966:	2305      	movs	r3, #5
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <HAL_SPI_MspInit+0xc8>)
 8000972:	f000 fd71 	bl	8001458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_SPI_MISO_Pin;
 8000976:	2310      	movs	r3, #16
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097e:	2301      	movs	r3, #1
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000986:	2305      	movs	r3, #5
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LCD_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4806      	ldr	r0, [pc, #24]	@ (80009ac <HAL_SPI_MspInit+0xcc>)
 8000992:	f000 fd61 	bl	8001458 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	@ 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40013000 	.word	0x40013000
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020400 	.word	0x40020400

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	4a0f      	ldr	r2, [pc, #60]	@ (80009fc <HAL_MspInit+0x4c>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <HAL_MspInit+0x4c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	@ 0x30
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad0 <HAL_InitTick+0xd0>)
 8000a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a18:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad0 <HAL_InitTick+0xd0>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a20:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad0 <HAL_InitTick+0xd0>)
 8000a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a2c:	f107 020c 	add.w	r2, r7, #12
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 fb14 	bl	8002064 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a3c:	f001 fafe 	bl	800203c <HAL_RCC_GetPCLK2Freq>
 8000a40:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a44:	4a23      	ldr	r2, [pc, #140]	@ (8000ad4 <HAL_InitTick+0xd4>)
 8000a46:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4a:	0c9b      	lsrs	r3, r3, #18
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a50:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <HAL_InitTick+0xd8>)
 8000a52:	4a22      	ldr	r2, [pc, #136]	@ (8000adc <HAL_InitTick+0xdc>)
 8000a54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a56:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <HAL_InitTick+0xd8>)
 8000a58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad8 <HAL_InitTick+0xd8>)
 8000a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a62:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <HAL_InitTick+0xd8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <HAL_InitTick+0xd8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <HAL_InitTick+0xd8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a76:	4818      	ldr	r0, [pc, #96]	@ (8000ad8 <HAL_InitTick+0xd8>)
 8000a78:	f001 ff58 	bl	800292c <HAL_TIM_Base_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d11b      	bne.n	8000ac2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a8a:	4813      	ldr	r0, [pc, #76]	@ (8000ad8 <HAL_InitTick+0xd8>)
 8000a8c:	f001 ffa8 	bl	80029e0 <HAL_TIM_Base_Start_IT>
 8000a90:	4603      	mov	r3, r0
 8000a92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d111      	bne.n	8000ac2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a9e:	2019      	movs	r0, #25
 8000aa0:	f000 fccc 	bl	800143c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b0f      	cmp	r3, #15
 8000aa8:	d808      	bhi.n	8000abc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	2019      	movs	r0, #25
 8000ab0:	f000 fca8 	bl	8001404 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <HAL_InitTick+0xe0>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	e002      	b.n	8000ac2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3730      	adds	r7, #48	@ 0x30
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	431bde83 	.word	0x431bde83
 8000ad8:	20000088 	.word	0x20000088
 8000adc:	40010000 	.word	0x40010000
 8000ae0:	2000000c 	.word	0x2000000c

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <NMI_Handler+0x4>

08000aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <MemManage_Handler+0x4>

08000afc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_USER_Pin);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f000 fe23 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b58:	4802      	ldr	r0, [pc, #8]	@ (8000b64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b5a:	f001 ffa3 	bl	8002aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000088 	.word	0x20000088

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b90:	480d      	ldr	r0, [pc, #52]	@ (8000bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b92:	490e      	ldr	r1, [pc, #56]	@ (8000bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b94:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba8:	4c0b      	ldr	r4, [pc, #44]	@ (8000bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bb6:	f7ff ffd7 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f002 f93f 	bl	8002e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fd35 	bl	800062c <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000bd0:	08029aa4 	.word	0x08029aa4
  ldr r2, =_sbss
 8000bd4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000bd8:	200000d8 	.word	0x200000d8

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <ST7789_cmd>:

//----------------------------------------------------------------------|
//------------------------------- CODE ----------------------------<
//----------------------------------------------------------------------|

static void ST7789_cmd(uint8_t cmd) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2110      	movs	r1, #16
 8000bee:	480c      	ldr	r0, [pc, #48]	@ (8000c20 <ST7789_cmd+0x40>)
 8000bf0:	f000 fdb6 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2140      	movs	r1, #64	@ 0x40
 8000bf8:	4809      	ldr	r0, [pc, #36]	@ (8000c20 <ST7789_cmd+0x40>)
 8000bfa:	f000 fdb1 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000bfe:	1df9      	adds	r1, r7, #7
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295
 8000c04:	2201      	movs	r2, #1
 8000c06:	4807      	ldr	r0, [pc, #28]	@ (8000c24 <ST7789_cmd+0x44>)
 8000c08:	f001 fae7 	bl	80021da <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2140      	movs	r1, #64	@ 0x40
 8000c10:	4803      	ldr	r0, [pc, #12]	@ (8000c20 <ST7789_cmd+0x40>)
 8000c12:	f000 fda5 	bl	8001760 <HAL_GPIO_WritePin>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40020000 	.word	0x40020000
 8000c24:	20000030 	.word	0x20000030

08000c28 <ST7789_data>:

static void ST7789_data(uint8_t data) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2110      	movs	r1, #16
 8000c36:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <ST7789_data+0x40>)
 8000c38:	f000 fd92 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2140      	movs	r1, #64	@ 0x40
 8000c40:	4809      	ldr	r0, [pc, #36]	@ (8000c68 <ST7789_data+0x40>)
 8000c42:	f000 fd8d 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000c46:	1df9      	adds	r1, r7, #7
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4807      	ldr	r0, [pc, #28]	@ (8000c6c <ST7789_data+0x44>)
 8000c50:	f001 fac3 	bl	80021da <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2140      	movs	r1, #64	@ 0x40
 8000c58:	4803      	ldr	r0, [pc, #12]	@ (8000c68 <ST7789_data+0x40>)
 8000c5a:	f000 fd81 	bl	8001760 <HAL_GPIO_WritePin>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	20000030 	.word	0x20000030

08000c70 <ST7789_send>:

static void ST7789_send(uint16_t value) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d005      	beq.n	8000c90 <ST7789_send+0x20>
		ST7789_cmd(value);
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ffa9 	bl	8000be0 <ST7789_cmd>
	} else {
		ST7789_data(value);
	}
}
 8000c8e:	e004      	b.n	8000c9a <ST7789_send+0x2a>
		ST7789_data(value);
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ffc7 	bl	8000c28 <ST7789_data>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <ST7789_init>:

void ST7789_init(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af02      	add	r7, sp, #8
	int i;
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2108      	movs	r1, #8
 8000cae:	482e      	ldr	r0, [pc, #184]	@ (8000d68 <ST7789_init+0xc4>)
 8000cb0:	f000 fd56 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2108      	movs	r1, #8
 8000cb8:	482b      	ldr	r0, [pc, #172]	@ (8000d68 <ST7789_init+0xc4>)
 8000cba:	f000 fd51 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	4829      	ldr	r0, [pc, #164]	@ (8000d68 <ST7789_init+0xc4>)
 8000cc4:	f000 fd4c 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2108      	movs	r1, #8
 8000ccc:	4826      	ldr	r0, [pc, #152]	@ (8000d68 <ST7789_init+0xc4>)
 8000cce:	f000 fd47 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000cd2:	2032      	movs	r0, #50	@ 0x32
 8000cd4:	f000 faba 	bl	800124c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2140      	movs	r1, #64	@ 0x40
 8000cdc:	4822      	ldr	r0, [pc, #136]	@ (8000d68 <ST7789_init+0xc4>)
 8000cde:	f000 fd3f 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_DC_Pin, SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	4820      	ldr	r0, [pc, #128]	@ (8000d68 <ST7789_init+0xc4>)
 8000ce8:	f000 fd3a 	bl	8001760 <HAL_GPIO_WritePin>

	LCD_ID = ST7789_read_id();
 8000cec:	f000 f842 	bl	8000d74 <ST7789_read_id>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <ST7789_init+0xc8>)
 8000cf6:	701a      	strb	r2, [r3, #0]

	HAL_Delay(50);
 8000cf8:	2032      	movs	r0, #50	@ 0x32
 8000cfa:	f000 faa7 	bl	800124c <HAL_Delay>
	ST7789_cmd(ST7789_SWRESET);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f7ff ff6e 	bl	8000be0 <ST7789_cmd>
	HAL_Delay(100);
 8000d04:	2064      	movs	r0, #100	@ 0x64
 8000d06:	f000 faa1 	bl	800124c <HAL_Delay>

	for (i = 0; i < sizeof(ST7789_init_table) / sizeof(uint16_t); i++) {
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	e009      	b.n	8000d24 <ST7789_init+0x80>
		ST7789_send(ST7789_init_table[i]);
 8000d10:	4a17      	ldr	r2, [pc, #92]	@ (8000d70 <ST7789_init+0xcc>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ffa9 	bl	8000c70 <ST7789_send>
	for (i = 0; i < sizeof(ST7789_init_table) / sizeof(uint16_t); i++) {
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3301      	adds	r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b3a      	cmp	r3, #58	@ 0x3a
 8000d28:	d9f2      	bls.n	8000d10 <ST7789_init+0x6c>
	}

	HAL_Delay(200);
 8000d2a:	20c8      	movs	r0, #200	@ 0xc8
 8000d2c:	f000 fa8e 	bl	800124c <HAL_Delay>
	ST7789_cmd(ST7789_SLPOUT);
 8000d30:	2011      	movs	r0, #17
 8000d32:	f7ff ff55 	bl	8000be0 <ST7789_cmd>
	HAL_Delay(120);
 8000d36:	2078      	movs	r0, #120	@ 0x78
 8000d38:	f000 fa88 	bl	800124c <HAL_Delay>
	ST7789_cmd(ST7789_DISPON);
 8000d3c:	2029      	movs	r0, #41	@ 0x29
 8000d3e:	f7ff ff4f 	bl	8000be0 <ST7789_cmd>
	ST7789_fill_box(0, 0, DISPLAY_W, DISPLAY_H, BLACK);
 8000d42:	2300      	movs	r3, #0
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	23f0      	movs	r3, #240	@ 0xf0
 8000d48:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 f8b1 	bl	8000eb6 <ST7789_fill_box>
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d5a:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <ST7789_init+0xc4>)
 8000d5c:	f000 fd00 	bl	8001760 <HAL_GPIO_WritePin>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	200000d0 	.word	0x200000d0
 8000d70:	08029a1c 	.word	0x08029a1c

08000d74 <ST7789_read_id>:

uint8_t ST7789_read_id(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af02      	add	r7, sp, #8
	uint8_t reg = ST7789_RDID3;
 8000d7a:	23dc      	movs	r3, #220	@ 0xdc
 8000d7c:	71fb      	strb	r3, [r7, #7]
	uint8_t tx = ST7789_NOP;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	71bb      	strb	r3, [r7, #6]
	uint8_t rx;

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2140      	movs	r1, #64	@ 0x40
 8000d86:	4813      	ldr	r0, [pc, #76]	@ (8000dd4 <ST7789_read_id+0x60>)
 8000d88:	f000 fcea 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4810      	ldr	r0, [pc, #64]	@ (8000dd4 <ST7789_read_id+0x60>)
 8000d92:	f000 fce5 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8000d96:	1df9      	adds	r1, r7, #7
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	480e      	ldr	r0, [pc, #56]	@ (8000dd8 <ST7789_read_id+0x64>)
 8000da0:	f001 fa1b 	bl	80021da <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2110      	movs	r1, #16
 8000da8:	480a      	ldr	r0, [pc, #40]	@ (8000dd4 <ST7789_read_id+0x60>)
 8000daa:	f000 fcd9 	bl	8001760 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, HAL_MAX_DELAY);
 8000dae:	1d7a      	adds	r2, r7, #5
 8000db0:	1db9      	adds	r1, r7, #6
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	4807      	ldr	r0, [pc, #28]	@ (8000dd8 <ST7789_read_id+0x64>)
 8000dbc:	f001 fb49 	bl	8002452 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2140      	movs	r1, #64	@ 0x40
 8000dc4:	4803      	ldr	r0, [pc, #12]	@ (8000dd4 <ST7789_read_id+0x60>)
 8000dc6:	f000 fccb 	bl	8001760 <HAL_GPIO_WritePin>

	return rx;
 8000dca:	797b      	ldrb	r3, [r7, #5]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	20000030 	.word	0x20000030

08000ddc <ST7789_data16>:

static void ST7789_data16(uint16_t value) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    data[0] = value >> 8;
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	737b      	strb	r3, [r7, #13]
    ST7789_data_bulk(data, 2);
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	2102      	movs	r1, #2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f805 	bl	8000e0c <ST7789_data_bulk>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <ST7789_data_bulk>:

static void ST7789_data_bulk(uint8_t* data, size_t size) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2110      	movs	r1, #16
 8000e1a:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <ST7789_data_bulk+0x40>)
 8000e1c:	f000 fca0 	bl	8001760 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2140      	movs	r1, #64	@ 0x40
 8000e24:	4809      	ldr	r0, [pc, #36]	@ (8000e4c <ST7789_data_bulk+0x40>)
 8000e26:	f000 fc9b 	bl	8001760 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <ST7789_data_bulk+0x44>)
 8000e36:	f001 f9d0 	bl	80021da <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2140      	movs	r1, #64	@ 0x40
 8000e3e:	4803      	ldr	r0, [pc, #12]	@ (8000e4c <ST7789_data_bulk+0x40>)
 8000e40:	f000 fc8e 	bl	8001760 <HAL_GPIO_WritePin>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	20000030 	.word	0x20000030

08000e54 <ST7789_set_window>:

static void ST7789_set_window(int x, int y, int width, int height) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
  ST7789_cmd(ST7789_CASET);
 8000e62:	202a      	movs	r0, #42	@ 0x2a
 8000e64:	f7ff febc 	bl	8000be0 <ST7789_cmd>
  ST7789_data16(LCD_OFFSET_X + x);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ffb5 	bl	8000ddc <ST7789_data16>
  ST7789_data16(LCD_OFFSET_X + x + width - 1);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ffaa 	bl	8000ddc <ST7789_data16>
	
  ST7789_cmd(ST7789_RASET);
 8000e88:	202b      	movs	r0, #43	@ 0x2b
 8000e8a:	f7ff fea9 	bl	8000be0 <ST7789_cmd>
  ST7789_data16(LCD_OFFSET_Y + y);
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ffa2 	bl	8000ddc <ST7789_data16>
  ST7789_data16(LCD_OFFSET_Y + y + height - 1);
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	4413      	add	r3, r2
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff97 	bl	8000ddc <ST7789_data16>
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <ST7789_fill_box>:

void ST7789_fill_box(int x, int y, int width, int height, uint16_t color) {
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	603b      	str	r3, [r7, #0]
	ST7789_set_window(x, y, width, height);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f7ff ffc2 	bl	8000e54 <ST7789_set_window>
	ST7789_cmd(ST7789_RAMWR);
 8000ed0:	202c      	movs	r0, #44	@ 0x2c
 8000ed2:	f7ff fe85 	bl	8000be0 <ST7789_cmd>

	for (int i = 0; i < width * height; i++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e006      	b.n	8000eea <ST7789_fill_box+0x34>
		ST7789_data16(color);
 8000edc:	8c3b      	ldrh	r3, [r7, #32]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff7c 	bl	8000ddc <ST7789_data16>
	for (int i = 0; i < width * height; i++) {
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	fb02 f303 	mul.w	r3, r2, r3
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf1      	blt.n	8000edc <ST7789_fill_box+0x26>
	}
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <ST7789_draw_image_fast>:
	ST7789_cmd(ST7789_RAMWR);
	for (int i = 0; i < width * height * 2; i++)
		ST7789_data(data[i]);
}

void ST7789_draw_image_fast(int x, int y, int width, int height, const uint16_t* data) {
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b08a      	sub	sp, #40	@ 0x28
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	603b      	str	r3, [r7, #0]
    const int chunk_size = MAX_CHUNK;
 8000f10:	f44f 5348 	mov.w	r3, #12800	@ 0x3200
 8000f14:	61fb      	str	r3, [r7, #28]
    int pixels_remaining = width * height;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	fb02 f303 	mul.w	r3, r2, r3
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    int pixels_sent = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]

    while (pixels_remaining > 0) {
 8000f24:	e048      	b.n	8000fb8 <ST7789_draw_image_fast+0xb6>
        int chunk_pixels = (pixels_remaining < chunk_size) ? pixels_remaining : chunk_size;
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	bfa8      	it	ge
 8000f2e:	4613      	movge	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        int chunk_rows = chunk_pixels / width;
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
        int chunk_cols = (chunk_pixels % width == 0) ? width : (chunk_pixels % width);
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	fb93 f2f2 	sdiv	r2, r3, r2
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	fb01 f202 	mul.w	r2, r1, r2
 8000f4a:	1a9b      	subs	r3, r3, r2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d008      	beq.n	8000f62 <ST7789_draw_image_fast+0x60>
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	fb93 f2f2 	sdiv	r2, r3, r2
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	fb01 f202 	mul.w	r2, r1, r2
 8000f5e:	1a9b      	subs	r3, r3, r2
 8000f60:	e000      	b.n	8000f64 <ST7789_draw_image_fast+0x62>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	613b      	str	r3, [r7, #16]

        ST7789_set_window(x + (pixels_sent % width), y + (pixels_sent / width), chunk_cols, chunk_rows);
 8000f66:	6a3b      	ldr	r3, [r7, #32]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	fb93 f2f2 	sdiv	r2, r3, r2
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	fb01 f202 	mul.w	r2, r1, r2
 8000f74:	1a9a      	subs	r2, r3, r2
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	18d0      	adds	r0, r2, r3
 8000f7a:	6a3a      	ldr	r2, [r7, #32]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	fb92 f2f3 	sdiv	r2, r2, r3
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	18d1      	adds	r1, r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	f7ff ff63 	bl	8000e54 <ST7789_set_window>
        ST7789_cmd(ST7789_RAMWR);
 8000f8e:	202c      	movs	r0, #44	@ 0x2c
 8000f90:	f7ff fe26 	bl	8000be0 <ST7789_cmd>
        ST7789_data_bulk((uint8_t*)(data + pixels_sent), chunk_pixels * sizeof(uint16_t));
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f9a:	441a      	add	r2, r3
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	f7ff ff32 	bl	8000e0c <ST7789_data_bulk>

        pixels_remaining -= chunk_pixels;
 8000fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
        pixels_sent += chunk_pixels;
 8000fb0:	6a3a      	ldr	r2, [r7, #32]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	623b      	str	r3, [r7, #32]
    while (pixels_remaining > 0) {
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	dcb3      	bgt.n	8000f26 <ST7789_draw_image_fast+0x24>
    }
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	@ 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <ST7789_write_char>:
		ST7789_put_pixel(x0 + y, y0 - x, color);
		ST7789_put_pixel(x0 - y, y0 - x, color);
	}
}

void ST7789_write_char(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000fc8:	b082      	sub	sp, #8
 8000fca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	80fb      	strh	r3, [r7, #6]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	80bb      	strh	r3, [r7, #4]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	70fb      	strb	r3, [r7, #3]
 8000fe0:	466b      	mov	r3, sp
 8000fe2:	469a      	mov	sl, r3
    uint32_t i, b, j;
    uint16_t char_buffer_size = font.height * font.width * 2;
 8000fe4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000fe8:	461a      	mov	r2, r3
 8000fea:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000fee:	fb12 f303 	smulbb	r3, r2, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	83bb      	strh	r3, [r7, #28]
    uint8_t char_buffer[char_buffer_size];
 8000ff8:	8bbe      	ldrh	r6, [r7, #28]
 8000ffa:	4633      	mov	r3, r6
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	61bb      	str	r3, [r7, #24]
 8001000:	b2b3      	uxth	r3, r6
 8001002:	2200      	movs	r2, #0
 8001004:	4698      	mov	r8, r3
 8001006:	4691      	mov	r9, r2
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001014:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001018:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800101c:	b2b3      	uxth	r3, r6
 800101e:	2200      	movs	r2, #0
 8001020:	461c      	mov	r4, r3
 8001022:	4615      	mov	r5, r2
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	00eb      	lsls	r3, r5, #3
 800102e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001032:	00e2      	lsls	r2, r4, #3
 8001034:	4633      	mov	r3, r6
 8001036:	3307      	adds	r3, #7
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	ebad 0d03 	sub.w	sp, sp, r3
 8001040:	466b      	mov	r3, sp
 8001042:	3300      	adds	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
    uint16_t buffer_index = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	83fb      	strh	r3, [r7, #30]

    for (i = 0; i < font.height; i++) {
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
 800104e:	e055      	b.n	80010fc <ST7789_write_char+0x134>
    		b = font.data[(ch - 32) * font.height + i];
 8001050:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	3b20      	subs	r3, #32
 8001056:	f897 104d 	ldrb.w	r1, [r7, #77]	@ 0x4d
 800105a:	fb01 f303 	mul.w	r3, r1, r3
 800105e:	4619      	mov	r1, r3
 8001060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001062:	440b      	add	r3, r1
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	613b      	str	r3, [r7, #16]
    		for (j = 0; j < font.width; j++) {
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
 8001070:	e03b      	b.n	80010ea <ST7789_write_char+0x122>
    			if ((b << j) & 0x8000) {
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d018      	beq.n	80010b4 <ST7789_write_char+0xec>
    				uint8_t data[] = {color >> 8, color & 0xFF};
 8001082:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001086:	0a1b      	lsrs	r3, r3, #8
 8001088:	b29b      	uxth	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	733b      	strb	r3, [r7, #12]
 800108e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001092:	b2db      	uxtb	r3, r3
 8001094:	737b      	strb	r3, [r7, #13]
    				char_buffer[buffer_index++] = data[0];
 8001096:	8bfb      	ldrh	r3, [r7, #30]
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	83fa      	strh	r2, [r7, #30]
 800109c:	461a      	mov	r2, r3
 800109e:	7b39      	ldrb	r1, [r7, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	5499      	strb	r1, [r3, r2]
    				char_buffer[buffer_index++] = data[1];
 80010a4:	8bfb      	ldrh	r3, [r7, #30]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	83fa      	strh	r2, [r7, #30]
 80010aa:	461a      	mov	r2, r3
 80010ac:	7b79      	ldrb	r1, [r7, #13]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	5499      	strb	r1, [r3, r2]
 80010b2:	e017      	b.n	80010e4 <ST7789_write_char+0x11c>
    			} else {
    				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80010b4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	723b      	strb	r3, [r7, #8]
 80010c0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	727b      	strb	r3, [r7, #9]
    				char_buffer[buffer_index++] = data[0];
 80010c8:	8bfb      	ldrh	r3, [r7, #30]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	83fa      	strh	r2, [r7, #30]
 80010ce:	461a      	mov	r2, r3
 80010d0:	7a39      	ldrb	r1, [r7, #8]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	5499      	strb	r1, [r3, r2]
    				char_buffer[buffer_index++] = data[1];
 80010d6:	8bfb      	ldrh	r3, [r7, #30]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	83fa      	strh	r2, [r7, #30]
 80010dc:	461a      	mov	r2, r3
 80010de:	7a79      	ldrb	r1, [r7, #9]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	5499      	strb	r1, [r3, r2]
    		for (j = 0; j < font.width; j++) {
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	3301      	adds	r3, #1
 80010e8:	623b      	str	r3, [r7, #32]
 80010ea:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80010ee:	461a      	mov	r2, r3
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d3bd      	bcc.n	8001072 <ST7789_write_char+0xaa>
    for (i = 0; i < font.height; i++) {
 80010f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f8:	3301      	adds	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80010fc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001100:	461a      	mov	r2, r3
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	4293      	cmp	r3, r2
 8001106:	d3a3      	bcc.n	8001050 <ST7789_write_char+0x88>
    			}
    		}
    	}

    ST7789_set_window(x, y, font.width, font.height);
 8001108:	88f8      	ldrh	r0, [r7, #6]
 800110a:	88b9      	ldrh	r1, [r7, #4]
 800110c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001110:	461a      	mov	r2, r3
 8001112:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001116:	f7ff fe9d 	bl	8000e54 <ST7789_set_window>
    ST7789_cmd(ST7789_RAMWR);
 800111a:	202c      	movs	r0, #44	@ 0x2c
 800111c:	f7ff fd60 	bl	8000be0 <ST7789_cmd>
    ST7789_data_bulk(char_buffer, sizeof(char_buffer));
 8001120:	4633      	mov	r3, r6
 8001122:	4619      	mov	r1, r3
 8001124:	6978      	ldr	r0, [r7, #20]
 8001126:	f7ff fe71 	bl	8000e0c <ST7789_data_bulk>
 800112a:	46d5      	mov	sp, sl
}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	@ 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001136:	b002      	add	sp, #8
 8001138:	4770      	bx	lr

0800113a <ST7789_write_string>:

void ST7789_write_string(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800113a:	b082      	sub	sp, #8
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af04      	add	r7, sp, #16
 8001142:	603a      	str	r2, [r7, #0]
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
 800114a:	460b      	mov	r3, r1
 800114c:	80bb      	strh	r3, [r7, #4]
	while (*str) {
 800114e:	e02e      	b.n	80011ae <ST7789_write_string+0x74>
		if (x + font.width >= DISPLAY_W) {
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	7d3a      	ldrb	r2, [r7, #20]
 8001154:	4413      	add	r3, r2
 8001156:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800115a:	db13      	blt.n	8001184 <ST7789_write_string+0x4a>
			x = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001160:	7d7b      	ldrb	r3, [r7, #21]
 8001162:	461a      	mov	r2, r3
 8001164:	88bb      	ldrh	r3, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= DISPLAY_H) {
 800116a:	88bb      	ldrh	r3, [r7, #4]
 800116c:	7d7a      	ldrb	r2, [r7, #21]
 800116e:	4413      	add	r3, r2
 8001170:	2bef      	cmp	r3, #239	@ 0xef
 8001172:	dc21      	bgt.n	80011b8 <ST7789_write_string+0x7e>
				break;
			}

			if (*str == ' ') {
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b20      	cmp	r3, #32
 800117a:	d103      	bne.n	8001184 <ST7789_write_string+0x4a>
				// skip spaces in the beginning of the new line
				str++;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	603b      	str	r3, [r7, #0]
				continue;
 8001182:	e014      	b.n	80011ae <ST7789_write_string+0x74>
			}
		}
		ST7789_write_char(x, y, *str, font, color, bgcolor);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	88b9      	ldrh	r1, [r7, #4]
 800118a:	88f8      	ldrh	r0, [r7, #6]
 800118c:	8c3b      	ldrh	r3, [r7, #32]
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	8bbb      	ldrh	r3, [r7, #28]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f7ff ff15 	bl	8000fc8 <ST7789_write_char>
		x += font.width;
 800119e:	7d3b      	ldrb	r3, [r7, #20]
 80011a0:	461a      	mov	r2, r3
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4413      	add	r3, r2
 80011a6:	80fb      	strh	r3, [r7, #6]
		str++;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	603b      	str	r3, [r7, #0]
	while (*str) {
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1cc      	bne.n	8001150 <ST7789_write_string+0x16>
	}
}
 80011b6:	e000      	b.n	80011ba <ST7789_write_string+0x80>
				break;
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011c4:	b002      	add	sp, #8
 80011c6:	4770      	bx	lr

080011c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <HAL_Init+0x40>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <HAL_Init+0x40>)
 80011d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <HAL_Init+0x40>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <HAL_Init+0x40>)
 80011de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e4:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <HAL_Init+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a07      	ldr	r2, [pc, #28]	@ (8001208 <HAL_Init+0x40>)
 80011ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f0:	2003      	movs	r0, #3
 80011f2:	f000 f8fc 	bl	80013ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f6:	200f      	movs	r0, #15
 80011f8:	f7ff fc02 	bl	8000a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011fc:	f7ff fbd8 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023c00 	.word	0x40023c00

0800120c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_IncTick+0x20>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_IncTick+0x24>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a04      	ldr	r2, [pc, #16]	@ (8001230 <HAL_IncTick+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000010 	.word	0x20000010
 8001230:	200000d4 	.word	0x200000d4

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	@ (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200000d4 	.word	0x200000d4

0800124c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff ffee 	bl	8001234 <HAL_GetTick>
 8001258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d005      	beq.n	8001272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001266:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <HAL_Delay+0x44>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001272:	bf00      	nop
 8001274:	f7ff ffde 	bl	8001234 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d8f7      	bhi.n	8001274 <HAL_Delay+0x28>
  {
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000010 	.word	0x20000010

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4907      	ldr	r1, [pc, #28]	@ (8001330 <__NVIC_EnableIRQ+0x38>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	@ (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	@ (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	@ 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ff4c 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001416:	f7ff ff61 	bl	80012dc <__NVIC_GetPriorityGrouping>
 800141a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	6978      	ldr	r0, [r7, #20]
 8001422:	f7ff ffb1 	bl	8001388 <NVIC_EncodePriority>
 8001426:	4602      	mov	r2, r0
 8001428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff80 	bl	8001334 <__NVIC_SetPriority>
}
 8001434:	bf00      	nop
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff54 	bl	80012f8 <__NVIC_EnableIRQ>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	@ 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	e159      	b.n	8001728 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001474:	2201      	movs	r2, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	429a      	cmp	r2, r3
 800148e:	f040 8148 	bne.w	8001722 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d005      	beq.n	80014aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d130      	bne.n	800150c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e0:	2201      	movs	r2, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	f003 0201 	and.w	r2, r3, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b03      	cmp	r3, #3
 8001516:	d017      	beq.n	8001548 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d123      	bne.n	800159c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	08da      	lsrs	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3208      	adds	r2, #8
 8001596:	69b9      	ldr	r1, [r7, #24]
 8001598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0203 	and.w	r2, r3, #3
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80a2 	beq.w	8001722 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b57      	ldr	r3, [pc, #348]	@ (8001740 <HAL_GPIO_Init+0x2e8>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	4a56      	ldr	r2, [pc, #344]	@ (8001740 <HAL_GPIO_Init+0x2e8>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ee:	4b54      	ldr	r3, [pc, #336]	@ (8001740 <HAL_GPIO_Init+0x2e8>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015fa:	4a52      	ldr	r2, [pc, #328]	@ (8001744 <HAL_GPIO_Init+0x2ec>)
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	220f      	movs	r2, #15
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a49      	ldr	r2, [pc, #292]	@ (8001748 <HAL_GPIO_Init+0x2f0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d019      	beq.n	800165a <HAL_GPIO_Init+0x202>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a48      	ldr	r2, [pc, #288]	@ (800174c <HAL_GPIO_Init+0x2f4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d013      	beq.n	8001656 <HAL_GPIO_Init+0x1fe>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a47      	ldr	r2, [pc, #284]	@ (8001750 <HAL_GPIO_Init+0x2f8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d00d      	beq.n	8001652 <HAL_GPIO_Init+0x1fa>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a46      	ldr	r2, [pc, #280]	@ (8001754 <HAL_GPIO_Init+0x2fc>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d007      	beq.n	800164e <HAL_GPIO_Init+0x1f6>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a45      	ldr	r2, [pc, #276]	@ (8001758 <HAL_GPIO_Init+0x300>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d101      	bne.n	800164a <HAL_GPIO_Init+0x1f2>
 8001646:	2304      	movs	r3, #4
 8001648:	e008      	b.n	800165c <HAL_GPIO_Init+0x204>
 800164a:	2307      	movs	r3, #7
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x204>
 800164e:	2303      	movs	r3, #3
 8001650:	e004      	b.n	800165c <HAL_GPIO_Init+0x204>
 8001652:	2302      	movs	r3, #2
 8001654:	e002      	b.n	800165c <HAL_GPIO_Init+0x204>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_GPIO_Init+0x204>
 800165a:	2300      	movs	r3, #0
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	f002 0203 	and.w	r2, r2, #3
 8001662:	0092      	lsls	r2, r2, #2
 8001664:	4093      	lsls	r3, r2
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800166c:	4935      	ldr	r1, [pc, #212]	@ (8001744 <HAL_GPIO_Init+0x2ec>)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	089b      	lsrs	r3, r3, #2
 8001672:	3302      	adds	r3, #2
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167a:	4b38      	ldr	r3, [pc, #224]	@ (800175c <HAL_GPIO_Init+0x304>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800169e:	4a2f      	ldr	r2, [pc, #188]	@ (800175c <HAL_GPIO_Init+0x304>)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a4:	4b2d      	ldr	r3, [pc, #180]	@ (800175c <HAL_GPIO_Init+0x304>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c8:	4a24      	ldr	r2, [pc, #144]	@ (800175c <HAL_GPIO_Init+0x304>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ce:	4b23      	ldr	r3, [pc, #140]	@ (800175c <HAL_GPIO_Init+0x304>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016f2:	4a1a      	ldr	r2, [pc, #104]	@ (800175c <HAL_GPIO_Init+0x304>)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f8:	4b18      	ldr	r3, [pc, #96]	@ (800175c <HAL_GPIO_Init+0x304>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800171c:	4a0f      	ldr	r2, [pc, #60]	@ (800175c <HAL_GPIO_Init+0x304>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3301      	adds	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	2b0f      	cmp	r3, #15
 800172c:	f67f aea2 	bls.w	8001474 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3724      	adds	r7, #36	@ 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	40013800 	.word	0x40013800
 8001748:	40020000 	.word	0x40020000
 800174c:	40020400 	.word	0x40020400
 8001750:	40020800 	.word	0x40020800
 8001754:	40020c00 	.word	0x40020c00
 8001758:	40021000 	.word	0x40021000
 800175c:	40013c00 	.word	0x40013c00

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800177c:	e003      	b.n	8001786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	619a      	str	r2, [r3, #24]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d006      	beq.n	80017b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017aa:	4a05      	ldr	r2, [pc, #20]	@ (80017c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f806 	bl	80017c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40013c00 	.word	0x40013c00

080017c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e267      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d075      	beq.n	80018e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017fa:	4b88      	ldr	r3, [pc, #544]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b04      	cmp	r3, #4
 8001804:	d00c      	beq.n	8001820 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001806:	4b85      	ldr	r3, [pc, #532]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800180e:	2b08      	cmp	r3, #8
 8001810:	d112      	bne.n	8001838 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001812:	4b82      	ldr	r3, [pc, #520]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800181a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800181e:	d10b      	bne.n	8001838 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	4b7e      	ldr	r3, [pc, #504]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d05b      	beq.n	80018e4 <HAL_RCC_OscConfig+0x108>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d157      	bne.n	80018e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e242      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001840:	d106      	bne.n	8001850 <HAL_RCC_OscConfig+0x74>
 8001842:	4b76      	ldr	r3, [pc, #472]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a75      	ldr	r2, [pc, #468]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e01d      	b.n	800188c <HAL_RCC_OscConfig+0xb0>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x98>
 800185a:	4b70      	ldr	r3, [pc, #448]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a6f      	ldr	r2, [pc, #444]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001860:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b6d      	ldr	r3, [pc, #436]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a6c      	ldr	r2, [pc, #432]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 800186c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e00b      	b.n	800188c <HAL_RCC_OscConfig+0xb0>
 8001874:	4b69      	ldr	r3, [pc, #420]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a68      	ldr	r2, [pc, #416]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 800187a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b66      	ldr	r3, [pc, #408]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a65      	ldr	r2, [pc, #404]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800188a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d013      	beq.n	80018bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fcce 	bl	8001234 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800189c:	f7ff fcca 	bl	8001234 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	@ 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e207      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ae:	4b5b      	ldr	r3, [pc, #364]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0xc0>
 80018ba:	e014      	b.n	80018e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff fcba 	bl	8001234 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c4:	f7ff fcb6 	bl	8001234 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b64      	cmp	r3, #100	@ 0x64
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e1f3      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d6:	4b51      	ldr	r3, [pc, #324]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0xe8>
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d063      	beq.n	80019ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018f2:	4b4a      	ldr	r3, [pc, #296]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00b      	beq.n	8001916 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fe:	4b47      	ldr	r3, [pc, #284]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001906:	2b08      	cmp	r3, #8
 8001908:	d11c      	bne.n	8001944 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800190a:	4b44      	ldr	r3, [pc, #272]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d116      	bne.n	8001944 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	4b41      	ldr	r3, [pc, #260]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <HAL_RCC_OscConfig+0x152>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e1c7      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4937      	ldr	r1, [pc, #220]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001942:	e03a      	b.n	80019ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d020      	beq.n	800198e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800194c:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <HAL_RCC_OscConfig+0x244>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff fc6f 	bl	8001234 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff fc6b 	bl	8001234 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e1a8      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001978:	4b28      	ldr	r3, [pc, #160]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4925      	ldr	r1, [pc, #148]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001988:	4313      	orrs	r3, r2
 800198a:	600b      	str	r3, [r1, #0]
 800198c:	e015      	b.n	80019ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198e:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <HAL_RCC_OscConfig+0x244>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff fc4e 	bl	8001234 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800199c:	f7ff fc4a 	bl	8001234 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e187      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ae:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d036      	beq.n	8001a34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d016      	beq.n	80019fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <HAL_RCC_OscConfig+0x248>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff fc2e 	bl	8001234 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff fc2a 	bl	8001234 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e167      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ee:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <HAL_RCC_OscConfig+0x240>)
 80019f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x200>
 80019fa:	e01b      	b.n	8001a34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fc:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <HAL_RCC_OscConfig+0x248>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a02:	f7ff fc17 	bl	8001234 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a08:	e00e      	b.n	8001a28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0a:	f7ff fc13 	bl	8001234 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d907      	bls.n	8001a28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e150      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	42470000 	.word	0x42470000
 8001a24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a28:	4b88      	ldr	r3, [pc, #544]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1ea      	bne.n	8001a0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8097 	beq.w	8001b70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a46:	4b81      	ldr	r3, [pc, #516]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10f      	bne.n	8001a72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b7d      	ldr	r3, [pc, #500]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a7c      	ldr	r2, [pc, #496]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b7a      	ldr	r3, [pc, #488]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a72:	4b77      	ldr	r3, [pc, #476]	@ (8001c50 <HAL_RCC_OscConfig+0x474>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d118      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7e:	4b74      	ldr	r3, [pc, #464]	@ (8001c50 <HAL_RCC_OscConfig+0x474>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a73      	ldr	r2, [pc, #460]	@ (8001c50 <HAL_RCC_OscConfig+0x474>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fbd3 	bl	8001234 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a92:	f7ff fbcf 	bl	8001234 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e10c      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c50 <HAL_RCC_OscConfig+0x474>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d106      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x2ea>
 8001ab8:	4b64      	ldr	r3, [pc, #400]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001abc:	4a63      	ldr	r2, [pc, #396]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac4:	e01c      	b.n	8001b00 <HAL_RCC_OscConfig+0x324>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x30c>
 8001ace:	4b5f      	ldr	r3, [pc, #380]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad2:	4a5e      	ldr	r2, [pc, #376]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ada:	4b5c      	ldr	r3, [pc, #368]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ade:	4a5b      	ldr	r2, [pc, #364]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0x324>
 8001ae8:	4b58      	ldr	r3, [pc, #352]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aec:	4a57      	ldr	r2, [pc, #348]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af4:	4b55      	ldr	r3, [pc, #340]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af8:	4a54      	ldr	r2, [pc, #336]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001afa:	f023 0304 	bic.w	r3, r3, #4
 8001afe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d015      	beq.n	8001b34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7ff fb94 	bl	8001234 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7ff fb90 	bl	8001234 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e0cb      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b26:	4b49      	ldr	r3, [pc, #292]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0ee      	beq.n	8001b10 <HAL_RCC_OscConfig+0x334>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b34:	f7ff fb7e 	bl	8001234 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fb7a 	bl	8001234 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e0b5      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b52:	4b3e      	ldr	r3, [pc, #248]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1ee      	bne.n	8001b3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b64:	4b39      	ldr	r3, [pc, #228]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b68:	4a38      	ldr	r2, [pc, #224]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001b6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80a1 	beq.w	8001cbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b7a:	4b34      	ldr	r3, [pc, #208]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d05c      	beq.n	8001c40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d141      	bne.n	8001c12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b31      	ldr	r3, [pc, #196]	@ (8001c54 <HAL_RCC_OscConfig+0x478>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fb4e 	bl	8001234 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff fb4a 	bl	8001234 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e087      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	4b27      	ldr	r3, [pc, #156]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	019b      	lsls	r3, r3, #6
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd0:	085b      	lsrs	r3, r3, #1
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	491b      	ldr	r1, [pc, #108]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <HAL_RCC_OscConfig+0x478>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7ff fb23 	bl	8001234 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7ff fb1f 	bl	8001234 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e05c      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x416>
 8001c10:	e054      	b.n	8001cbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <HAL_RCC_OscConfig+0x478>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fb0c 	bl	8001234 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c20:	f7ff fb08 	bl	8001234 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e045      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x444>
 8001c3e:	e03d      	b.n	8001cbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e038      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000
 8001c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <HAL_RCC_OscConfig+0x4ec>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d028      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d121      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d11a      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c88:	4013      	ands	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d111      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800

08001ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0cc      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b68      	ldr	r3, [pc, #416]	@ (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d90c      	bls.n	8001d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b65      	ldr	r3, [pc, #404]	@ (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b63      	ldr	r3, [pc, #396]	@ (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0b8      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d020      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d20:	4b59      	ldr	r3, [pc, #356]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4a58      	ldr	r2, [pc, #352]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d38:	4b53      	ldr	r3, [pc, #332]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a52      	ldr	r2, [pc, #328]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d44:	4b50      	ldr	r3, [pc, #320]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	494d      	ldr	r1, [pc, #308]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d044      	beq.n	8001dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b47      	ldr	r3, [pc, #284]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d119      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e07f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d003      	beq.n	8001d8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d107      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e06f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e067      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001daa:	4b37      	ldr	r3, [pc, #220]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f023 0203 	bic.w	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4934      	ldr	r1, [pc, #208]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dbc:	f7ff fa3a 	bl	8001234 <HAL_GetTick>
 8001dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc2:	e00a      	b.n	8001dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc4:	f7ff fa36 	bl	8001234 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e04f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dda:	4b2b      	ldr	r3, [pc, #172]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 020c 	and.w	r2, r3, #12
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d1eb      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dec:	4b25      	ldr	r3, [pc, #148]	@ (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d20c      	bcs.n	8001e14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b20      	ldr	r3, [pc, #128]	@ (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e032      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e20:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4916      	ldr	r1, [pc, #88]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d009      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e3e:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	490e      	ldr	r1, [pc, #56]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e52:	f000 f821 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	490a      	ldr	r1, [pc, #40]	@ (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	5ccb      	ldrb	r3, [r1, r3]
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	4a09      	ldr	r2, [pc, #36]	@ (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e6e:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fdc4 	bl	8000a00 <HAL_InitTick>

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023c00 	.word	0x40023c00
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	080286b8 	.word	0x080286b8
 8001e90:	20000000 	.word	0x20000000
 8001e94:	2000000c 	.word	0x2000000c

08001e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e9c:	b090      	sub	sp, #64	@ 0x40
 8001e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eb0:	4b59      	ldr	r3, [pc, #356]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d00d      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	f200 80a1 	bhi.w	8002004 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x34>
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d003      	beq.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001eca:	e09b      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ecc:	4b53      	ldr	r3, [pc, #332]	@ (800201c <HAL_RCC_GetSysClockFreq+0x184>)
 8001ece:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001ed0:	e09b      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ed2:	4b53      	ldr	r3, [pc, #332]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ed6:	e098      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ed8:	4b4f      	ldr	r3, [pc, #316]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ee0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ee2:	4b4d      	ldr	r3, [pc, #308]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d028      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eee:	4b4a      	ldr	r3, [pc, #296]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	099b      	lsrs	r3, r3, #6
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	623b      	str	r3, [r7, #32]
 8001ef8:	627a      	str	r2, [r7, #36]	@ 0x24
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f00:	2100      	movs	r1, #0
 8001f02:	4b47      	ldr	r3, [pc, #284]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f04:	fb03 f201 	mul.w	r2, r3, r1
 8001f08:	2300      	movs	r3, #0
 8001f0a:	fb00 f303 	mul.w	r3, r0, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a43      	ldr	r2, [pc, #268]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f12:	fba0 1202 	umull	r1, r2, r0, r2
 8001f16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f18:	460a      	mov	r2, r1
 8001f1a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f1e:	4413      	add	r3, r2
 8001f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f24:	2200      	movs	r2, #0
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	61fa      	str	r2, [r7, #28]
 8001f2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f32:	f7fe f951 	bl	80001d8 <__aeabi_uldivmod>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f3e:	e053      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f40:	4b35      	ldr	r3, [pc, #212]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	2200      	movs	r2, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	617a      	str	r2, [r7, #20]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f52:	f04f 0b00 	mov.w	fp, #0
 8001f56:	4652      	mov	r2, sl
 8001f58:	465b      	mov	r3, fp
 8001f5a:	f04f 0000 	mov.w	r0, #0
 8001f5e:	f04f 0100 	mov.w	r1, #0
 8001f62:	0159      	lsls	r1, r3, #5
 8001f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f68:	0150      	lsls	r0, r2, #5
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	ebb2 080a 	subs.w	r8, r2, sl
 8001f72:	eb63 090b 	sbc.w	r9, r3, fp
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f8a:	ebb2 0408 	subs.w	r4, r2, r8
 8001f8e:	eb63 0509 	sbc.w	r5, r3, r9
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	00eb      	lsls	r3, r5, #3
 8001f9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fa0:	00e2      	lsls	r2, r4, #3
 8001fa2:	4614      	mov	r4, r2
 8001fa4:	461d      	mov	r5, r3
 8001fa6:	eb14 030a 	adds.w	r3, r4, sl
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	eb45 030b 	adc.w	r3, r5, fp
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	028b      	lsls	r3, r1, #10
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fc8:	4621      	mov	r1, r4
 8001fca:	028a      	lsls	r2, r1, #10
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	60fa      	str	r2, [r7, #12]
 8001fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fdc:	f7fe f8fc 	bl	80001d8 <__aeabi_uldivmod>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	0c1b      	lsrs	r3, r3, #16
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001ff8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002002:	e002      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_RCC_GetSysClockFreq+0x184>)
 8002006:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800200c:	4618      	mov	r0, r3
 800200e:	3740      	adds	r7, #64	@ 0x40
 8002010:	46bd      	mov	sp, r7
 8002012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	00f42400 	.word	0x00f42400
 8002020:	017d7840 	.word	0x017d7840

08002024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <HAL_RCC_GetHCLKFreq+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000000 	.word	0x20000000

0800203c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002040:	f7ff fff0 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	0b5b      	lsrs	r3, r3, #13
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	4903      	ldr	r1, [pc, #12]	@ (8002060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	080286c8 	.word	0x080286c8

08002064 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	220f      	movs	r2, #15
 8002072:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002074:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0203 	and.w	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002080:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <HAL_RCC_GetClockConfig+0x5c>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800208c:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <HAL_RCC_GetClockConfig+0x5c>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002098:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <HAL_RCC_GetClockConfig+0x5c>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	08db      	lsrs	r3, r3, #3
 800209e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020a6:	4b07      	ldr	r3, [pc, #28]	@ (80020c4 <HAL_RCC_GetClockConfig+0x60>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0207 	and.w	r2, r3, #7
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	601a      	str	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40023c00 	.word	0x40023c00

080020c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e07b      	b.n	80021d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d108      	bne.n	80020f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020ea:	d009      	beq.n	8002100 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
 80020f2:	e005      	b.n	8002100 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fbe0 	bl	80008e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002136:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002184:	ea42 0103 	orr.w	r1, r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	f003 0104 	and.w	r1, r3, #4
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	f003 0210 	and.w	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	69da      	ldr	r2, [r3, #28]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b088      	sub	sp, #32
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	4613      	mov	r3, r2
 80021e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_SPI_Transmit+0x22>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e126      	b.n	800244a <HAL_SPI_Transmit+0x270>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002204:	f7ff f816 	bl	8001234 <HAL_GetTick>
 8002208:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d002      	beq.n	8002220 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800221e:	e10b      	b.n	8002438 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_SPI_Transmit+0x52>
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002230:	e102      	b.n	8002438 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2203      	movs	r2, #3
 8002236:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	88fa      	ldrh	r2, [r7, #6]
 800224a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	88fa      	ldrh	r2, [r7, #6]
 8002250:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002278:	d10f      	bne.n	800229a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002288:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002298:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a4:	2b40      	cmp	r3, #64	@ 0x40
 80022a6:	d007      	beq.n	80022b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022c0:	d14b      	bne.n	800235a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <HAL_SPI_Transmit+0xf6>
 80022ca:	8afb      	ldrh	r3, [r7, #22]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d13e      	bne.n	800234e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d4:	881a      	ldrh	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e0:	1c9a      	adds	r2, r3, #2
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022f4:	e02b      	b.n	800234e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b02      	cmp	r3, #2
 8002302:	d112      	bne.n	800232a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002308:	881a      	ldrh	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002314:	1c9a      	adds	r2, r3, #2
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002328:	e011      	b.n	800234e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800232a:	f7fe ff83 	bl	8001234 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d803      	bhi.n	8002342 <HAL_SPI_Transmit+0x168>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d102      	bne.n	8002348 <HAL_SPI_Transmit+0x16e>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800234c:	e074      	b.n	8002438 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002352:	b29b      	uxth	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ce      	bne.n	80022f6 <HAL_SPI_Transmit+0x11c>
 8002358:	e04c      	b.n	80023f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_SPI_Transmit+0x18e>
 8002362:	8afb      	ldrh	r3, [r7, #22]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d140      	bne.n	80023ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	330c      	adds	r3, #12
 8002372:	7812      	ldrb	r2, [r2, #0]
 8002374:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800238e:	e02c      	b.n	80023ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b02      	cmp	r3, #2
 800239c:	d113      	bne.n	80023c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	330c      	adds	r3, #12
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80023c4:	e011      	b.n	80023ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023c6:	f7fe ff35 	bl	8001234 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d803      	bhi.n	80023de <HAL_SPI_Transmit+0x204>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d102      	bne.n	80023e4 <HAL_SPI_Transmit+0x20a>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023e8:	e026      	b.n	8002438 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1cd      	bne.n	8002390 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	6839      	ldr	r1, [r7, #0]
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fa55 	bl	80028a8 <SPI_EndRxTxTransaction>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10a      	bne.n	8002428 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	77fb      	strb	r3, [r7, #31]
 8002434:	e000      	b.n	8002438 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002436:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002448:	7ffb      	ldrb	r3, [r7, #31]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b08c      	sub	sp, #48	@ 0x30
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002460:	2301      	movs	r3, #1
 8002462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_SPI_TransmitReceive+0x26>
 8002474:	2302      	movs	r3, #2
 8002476:	e18a      	b.n	800278e <HAL_SPI_TransmitReceive+0x33c>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002480:	f7fe fed8 	bl	8001234 <HAL_GetTick>
 8002484:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800248c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800249a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d00f      	beq.n	80024c2 <HAL_SPI_TransmitReceive+0x70>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024a8:	d107      	bne.n	80024ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <HAL_SPI_TransmitReceive+0x68>
 80024b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d003      	beq.n	80024c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
 80024bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80024c0:	e15b      	b.n	800277a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_SPI_TransmitReceive+0x82>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_SPI_TransmitReceive+0x82>
 80024ce:	887b      	ldrh	r3, [r7, #2]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d103      	bne.n	80024dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80024da:	e14e      	b.n	800277a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d003      	beq.n	80024f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2205      	movs	r2, #5
 80024ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	887a      	ldrh	r2, [r7, #2]
 8002506:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	887a      	ldrh	r2, [r7, #2]
 8002512:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002530:	2b40      	cmp	r3, #64	@ 0x40
 8002532:	d007      	beq.n	8002544 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002542:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800254c:	d178      	bne.n	8002640 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_SPI_TransmitReceive+0x10a>
 8002556:	8b7b      	ldrh	r3, [r7, #26]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d166      	bne.n	800262a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002560:	881a      	ldrh	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256c:	1c9a      	adds	r2, r3, #2
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002580:	e053      	b.n	800262a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b02      	cmp	r3, #2
 800258e:	d11b      	bne.n	80025c8 <HAL_SPI_TransmitReceive+0x176>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d016      	beq.n	80025c8 <HAL_SPI_TransmitReceive+0x176>
 800259a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259c:	2b01      	cmp	r3, #1
 800259e:	d113      	bne.n	80025c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a4:	881a      	ldrh	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b0:	1c9a      	adds	r2, r3, #2
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d119      	bne.n	800260a <HAL_SPI_TransmitReceive+0x1b8>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d014      	beq.n	800260a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ea:	b292      	uxth	r2, r2
 80025ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f2:	1c9a      	adds	r2, r3, #2
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002606:	2301      	movs	r3, #1
 8002608:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800260a:	f7fe fe13 	bl	8001234 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002616:	429a      	cmp	r2, r3
 8002618:	d807      	bhi.n	800262a <HAL_SPI_TransmitReceive+0x1d8>
 800261a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d003      	beq.n	800262a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8002628:	e0a7      	b.n	800277a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800262e:	b29b      	uxth	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1a6      	bne.n	8002582 <HAL_SPI_TransmitReceive+0x130>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1a1      	bne.n	8002582 <HAL_SPI_TransmitReceive+0x130>
 800263e:	e07c      	b.n	800273a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <HAL_SPI_TransmitReceive+0x1fc>
 8002648:	8b7b      	ldrh	r3, [r7, #26]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d16b      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	7812      	ldrb	r2, [r2, #0]
 800265a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002674:	e057      	b.n	8002726 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b02      	cmp	r3, #2
 8002682:	d11c      	bne.n	80026be <HAL_SPI_TransmitReceive+0x26c>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d017      	beq.n	80026be <HAL_SPI_TransmitReceive+0x26c>
 800268e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d114      	bne.n	80026be <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	330c      	adds	r3, #12
 800269e:	7812      	ldrb	r2, [r2, #0]
 80026a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d119      	bne.n	8002700 <HAL_SPI_TransmitReceive+0x2ae>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d014      	beq.n	8002700 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026fc:	2301      	movs	r3, #1
 80026fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002700:	f7fe fd98 	bl	8001234 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800270c:	429a      	cmp	r2, r3
 800270e:	d803      	bhi.n	8002718 <HAL_SPI_TransmitReceive+0x2c6>
 8002710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002716:	d102      	bne.n	800271e <HAL_SPI_TransmitReceive+0x2cc>
 8002718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800271a:	2b00      	cmp	r3, #0
 800271c:	d103      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8002724:	e029      	b.n	800277a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1a2      	bne.n	8002676 <HAL_SPI_TransmitReceive+0x224>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d19d      	bne.n	8002676 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800273a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800273c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f8b2 	bl	80028a8 <SPI_EndRxTxTransaction>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002756:	e010      	b.n	800277a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10b      	bne.n	8002778 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	e000      	b.n	800277a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002778:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800278a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800278e:	4618      	mov	r0, r3
 8002790:	3730      	adds	r7, #48	@ 0x30
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027a8:	f7fe fd44 	bl	8001234 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	4413      	add	r3, r2
 80027b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027b8:	f7fe fd3c 	bl	8001234 <HAL_GetTick>
 80027bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027be:	4b39      	ldr	r3, [pc, #228]	@ (80028a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	015b      	lsls	r3, r3, #5
 80027c4:	0d1b      	lsrs	r3, r3, #20
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ce:	e054      	b.n	800287a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d050      	beq.n	800287a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027d8:	f7fe fd2c 	bl	8001234 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d902      	bls.n	80027ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d13d      	bne.n	800286a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80027fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002806:	d111      	bne.n	800282c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002810:	d004      	beq.n	800281c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800281a:	d107      	bne.n	800282c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800282a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002834:	d10f      	bne.n	8002856 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002854:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e017      	b.n	800289a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3b01      	subs	r3, #1
 8002878:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4013      	ands	r3, r2
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	429a      	cmp	r2, r3
 8002896:	d19b      	bne.n	80027d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3720      	adds	r7, #32
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000000 	.word	0x20000000

080028a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <SPI_EndRxTxTransaction+0x7c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002928 <SPI_EndRxTxTransaction+0x80>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0d5b      	lsrs	r3, r3, #21
 80028c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028c4:	fb02 f303 	mul.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028d2:	d112      	bne.n	80028fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2200      	movs	r2, #0
 80028dc:	2180      	movs	r1, #128	@ 0x80
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7ff ff5a 	bl	8002798 <SPI_WaitFlagStateUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d016      	beq.n	8002918 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ee:	f043 0220 	orr.w	r2, r3, #32
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e00f      	b.n	800291a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	3b01      	subs	r3, #1
 8002904:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002910:	2b80      	cmp	r3, #128	@ 0x80
 8002912:	d0f2      	beq.n	80028fa <SPI_EndRxTxTransaction+0x52>
 8002914:	e000      	b.n	8002918 <SPI_EndRxTxTransaction+0x70>
        break;
 8002916:	bf00      	nop
  }

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000000 	.word	0x20000000
 8002928:	165e9f81 	.word	0x165e9f81

0800292c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e041      	b.n	80029c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f839 	bl	80029ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3304      	adds	r3, #4
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f000 f9ca 	bl	8002d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d001      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e044      	b.n	8002a82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1e      	ldr	r2, [pc, #120]	@ (8002a90 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d018      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x6c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a22:	d013      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x6c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1a      	ldr	r2, [pc, #104]	@ (8002a94 <HAL_TIM_Base_Start_IT+0xb4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00e      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x6c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a19      	ldr	r2, [pc, #100]	@ (8002a98 <HAL_TIM_Base_Start_IT+0xb8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d009      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x6c>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a17      	ldr	r2, [pc, #92]	@ (8002a9c <HAL_TIM_Base_Start_IT+0xbc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d004      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x6c>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a16      	ldr	r2, [pc, #88]	@ (8002aa0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d111      	bne.n	8002a70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d010      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6e:	e007      	b.n	8002a80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40010000 	.word	0x40010000
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40000800 	.word	0x40000800
 8002a9c:	40000c00 	.word	0x40000c00
 8002aa0:	40014000 	.word	0x40014000

08002aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d122      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d11b      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0202 	mvn.w	r2, #2
 8002ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8ee 	bl	8002cc8 <HAL_TIM_IC_CaptureCallback>
 8002aec:	e005      	b.n	8002afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f8e0 	bl	8002cb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f8f1 	bl	8002cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d122      	bne.n	8002b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d11b      	bne.n	8002b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0204 	mvn.w	r2, #4
 8002b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8c4 	bl	8002cc8 <HAL_TIM_IC_CaptureCallback>
 8002b40:	e005      	b.n	8002b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8b6 	bl	8002cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f8c7 	bl	8002cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d122      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d11b      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0208 	mvn.w	r2, #8
 8002b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f89a 	bl	8002cc8 <HAL_TIM_IC_CaptureCallback>
 8002b94:	e005      	b.n	8002ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f88c 	bl	8002cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f89d 	bl	8002cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b10      	cmp	r3, #16
 8002bb4:	d122      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d11b      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0210 	mvn.w	r2, #16
 8002bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f870 	bl	8002cc8 <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f862 	bl	8002cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f873 	bl	8002cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d10e      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d107      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0201 	mvn.w	r2, #1
 8002c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fd fe0e 	bl	8000844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c32:	2b80      	cmp	r3, #128	@ 0x80
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c40:	2b80      	cmp	r3, #128	@ 0x80
 8002c42:	d107      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f8e2 	bl	8002e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5e:	2b40      	cmp	r3, #64	@ 0x40
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6c:	2b40      	cmp	r3, #64	@ 0x40
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f838 	bl	8002cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d10e      	bne.n	8002cac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d107      	bne.n	8002cac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0220 	mvn.w	r2, #32
 8002ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f8ac 	bl	8002e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a34      	ldr	r2, [pc, #208]	@ (8002de8 <TIM_Base_SetConfig+0xe4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00f      	beq.n	8002d3c <TIM_Base_SetConfig+0x38>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d22:	d00b      	beq.n	8002d3c <TIM_Base_SetConfig+0x38>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a31      	ldr	r2, [pc, #196]	@ (8002dec <TIM_Base_SetConfig+0xe8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d007      	beq.n	8002d3c <TIM_Base_SetConfig+0x38>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a30      	ldr	r2, [pc, #192]	@ (8002df0 <TIM_Base_SetConfig+0xec>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d003      	beq.n	8002d3c <TIM_Base_SetConfig+0x38>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a2f      	ldr	r2, [pc, #188]	@ (8002df4 <TIM_Base_SetConfig+0xf0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d108      	bne.n	8002d4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a25      	ldr	r2, [pc, #148]	@ (8002de8 <TIM_Base_SetConfig+0xe4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01b      	beq.n	8002d8e <TIM_Base_SetConfig+0x8a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d5c:	d017      	beq.n	8002d8e <TIM_Base_SetConfig+0x8a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a22      	ldr	r2, [pc, #136]	@ (8002dec <TIM_Base_SetConfig+0xe8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <TIM_Base_SetConfig+0x8a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a21      	ldr	r2, [pc, #132]	@ (8002df0 <TIM_Base_SetConfig+0xec>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00f      	beq.n	8002d8e <TIM_Base_SetConfig+0x8a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a20      	ldr	r2, [pc, #128]	@ (8002df4 <TIM_Base_SetConfig+0xf0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00b      	beq.n	8002d8e <TIM_Base_SetConfig+0x8a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a1f      	ldr	r2, [pc, #124]	@ (8002df8 <TIM_Base_SetConfig+0xf4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d007      	beq.n	8002d8e <TIM_Base_SetConfig+0x8a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a1e      	ldr	r2, [pc, #120]	@ (8002dfc <TIM_Base_SetConfig+0xf8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d003      	beq.n	8002d8e <TIM_Base_SetConfig+0x8a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a1d      	ldr	r2, [pc, #116]	@ (8002e00 <TIM_Base_SetConfig+0xfc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d108      	bne.n	8002da0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a08      	ldr	r2, [pc, #32]	@ (8002de8 <TIM_Base_SetConfig+0xe4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d103      	bne.n	8002dd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	615a      	str	r2, [r3, #20]
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40010000 	.word	0x40010000
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800
 8002df4:	40000c00 	.word	0x40000c00
 8002df8:	40014000 	.word	0x40014000
 8002dfc:	40014400 	.word	0x40014400
 8002e00:	40014800 	.word	0x40014800

08002e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <memset>:
 8002e2c:	4402      	add	r2, r0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d100      	bne.n	8002e36 <memset+0xa>
 8002e34:	4770      	bx	lr
 8002e36:	f803 1b01 	strb.w	r1, [r3], #1
 8002e3a:	e7f9      	b.n	8002e30 <memset+0x4>

08002e3c <__libc_init_array>:
 8002e3c:	b570      	push	{r4, r5, r6, lr}
 8002e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8002e74 <__libc_init_array+0x38>)
 8002e40:	4c0d      	ldr	r4, [pc, #52]	@ (8002e78 <__libc_init_array+0x3c>)
 8002e42:	1b64      	subs	r4, r4, r5
 8002e44:	10a4      	asrs	r4, r4, #2
 8002e46:	2600      	movs	r6, #0
 8002e48:	42a6      	cmp	r6, r4
 8002e4a:	d109      	bne.n	8002e60 <__libc_init_array+0x24>
 8002e4c:	4d0b      	ldr	r5, [pc, #44]	@ (8002e7c <__libc_init_array+0x40>)
 8002e4e:	4c0c      	ldr	r4, [pc, #48]	@ (8002e80 <__libc_init_array+0x44>)
 8002e50:	f000 f818 	bl	8002e84 <_init>
 8002e54:	1b64      	subs	r4, r4, r5
 8002e56:	10a4      	asrs	r4, r4, #2
 8002e58:	2600      	movs	r6, #0
 8002e5a:	42a6      	cmp	r6, r4
 8002e5c:	d105      	bne.n	8002e6a <__libc_init_array+0x2e>
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
 8002e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e64:	4798      	blx	r3
 8002e66:	3601      	adds	r6, #1
 8002e68:	e7ee      	b.n	8002e48 <__libc_init_array+0xc>
 8002e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6e:	4798      	blx	r3
 8002e70:	3601      	adds	r6, #1
 8002e72:	e7f2      	b.n	8002e5a <__libc_init_array+0x1e>
 8002e74:	08029a9c 	.word	0x08029a9c
 8002e78:	08029a9c 	.word	0x08029a9c
 8002e7c:	08029a9c 	.word	0x08029a9c
 8002e80:	08029aa0 	.word	0x08029aa0

08002e84 <_init>:
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e86:	bf00      	nop
 8002e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8a:	bc08      	pop	{r3}
 8002e8c:	469e      	mov	lr, r3
 8002e8e:	4770      	bx	lr

08002e90 <_fini>:
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e92:	bf00      	nop
 8002e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e96:	bc08      	pop	{r3}
 8002e98:	469e      	mov	lr, r3
 8002e9a:	4770      	bx	lr
